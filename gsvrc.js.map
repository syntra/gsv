{"version":3,"sources":["webpack:///./docs/pages/gsvrc.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","_ref6","currentPage","_ref7","_ref8","id","aria-hidden","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17"],"mappings":"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","file":"gsvrc.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/','pages/gsvrc.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1><code>.gsvrc</code></h1>\n<p>The <code>.gsvrc</code> file is the most important file for gsv. It's where you define all your configuration options for your blog. Every gsv managed gatsby blog should have a <code>.gsvrc</code> file in the root directory. If you do not have a <code>.gsvrc</code> file, you can create one using <Link currentPage={(this && this.props || props).currentPage} to=\"/pages/commands/config.html\">config:init</Link>.</p>\n<p>The <code>.gsvrc</code> file uses YAML syntax. Here is an example of a valid configuration</p>\n<pre><code className=\"language-yaml\"><span className=\"hljs-attr\">title:</span> <span className=\"hljs-string\">My</span> <span className=\"hljs-string\">Awesome</span> <span className=\"hljs-string\">Blog</span><br /><span className=\"hljs-attr\">url:</span> <span className=\"hljs-attr\">https://syntra.io</span><br /><span className=\"hljs-attr\">author:</span><br /><span className=\"hljs-attr\">  - name:</span> <span className=\"hljs-string\">Garet</span> <span className=\"hljs-string\">McKinley</span><br /><span className=\"hljs-attr\">    email:</span> <span className=\"hljs-string\">hi@garet.io</span><br /></code></pre>\n<h2 id=\"title\">title <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#title\" aria-hidden=\"true\"></Link></h2>\n<p>The <code>title</code> property sets the global title for your blog. This is what appears at the top of every page (by default) and is the <code>&lt;title/&gt;</code> in the <code>&lt;head/&gt;</code> of the index page.</p>\n<pre><code className=\"language-yaml\"><span className=\"hljs-attr\">title:</span> <span className=\"hljs-string\">My</span> <span className=\"hljs-string\">Blog</span> <span className=\"hljs-string\">Title</span><br /></code></pre>\n<h2 id=\"url\">url <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#url\" aria-hidden=\"true\"></Link></h2>\n<p>The <code>url</code> property is the root url of your blog, without trailing slashes.</p>\n<pre><code className=\"language-yaml\"><span className=\"hljs-attr\">url:</span> <span className=\"hljs-attr\">https://syntra.io</span><br /></code></pre>\n<h2 id=\"author\">author <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#author\" aria-hidden=\"true\"></Link></h2>\n<p>The <code>author</code> property is an array of authors that will be posting on your blog. You can have as many or as few as you'd like.</p>\n<pre><code className=\"language-yaml\"><span className=\"hljs-attr\">author:</span><br /><span className=\"hljs-attr\">  - name:</span> <span className=\"hljs-string\">Garet</span> <span className=\"hljs-string\">McKinley</span><br /><span className=\"hljs-attr\">    email:</span> <span className=\"hljs-string\">hi@garet.io</span><br /><span className=\"hljs-attr\">  - name:</span> <span className=\"hljs-string\">Jeff</span> <span className=\"hljs-string\">Bezos</span><br /><span className=\"hljs-attr\">    email:</span> <span className=\"hljs-string\">jeff@amazon.com</span><br /></code></pre>\n<h2 id=\"dir\">dir <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#dir\" aria-hidden=\"true\"></Link></h2>\n<p>The <code>dir</code> property is optional and allows you to override the default paths to save blog posts and pages.</p>\n<p>The default path to save pages to is <code>src/pages</code> and the default path to save posts to is <code>src/posts</code>.</p>\n<pre><code className=\"language-yaml\"><span className=\"hljs-attr\">dir:</span><br /><span className=\"hljs-attr\">  pages:</span> <span className=\"hljs-string\">src/content/pages</span><br /><span className=\"hljs-attr\">  posts:</span> <span className=\"hljs-string\">src/content/posts</span><br /></code></pre>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}